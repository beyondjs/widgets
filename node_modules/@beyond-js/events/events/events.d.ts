/************
Processor: ts
************/

// events.ts
declare namespace ns_0 {
  import EventsSpecs = ns_1.EventsSpecs;
  import ListenerFunction = ns_1.ListenerFunction;
  import Trigger = ns_1.Trigger;
  export class Events {
    #private;
    get destroyed(): boolean;
    constructor(specs?: EventsSpecs);
    /**
     * Binds an event handler to an event name
     *
     * @param {string} event
     * @param {ListenerFunction} listener
     * @param {number} priority
     * @returns {this}
     */
    on(event: string, listener: ListenerFunction, priority?: number): this;
    bind: (event: string, listener: ListenerFunction, priority?: number) => this;
    /**
     * Unbind an event listener
     *
     * @param {string} event
     * @param {ListenerFunction} listener
     * @param {number} force
     * @returns {this}
     */
    off(event: string, listener: ListenerFunction, force?: number): this;
    unbind: (event: string, listener: ListenerFunction, force?: number) => this;
    /**
     * Triggers an event
     *
     * @param {Trigger} event
     * @param {*} rest
     * @returns {Promise<*>}
     */
    trigger(event: Trigger, ...rest: any): any;
    destroy(): void;
  }
}


// types.ts
declare namespace ns_1 {
  export interface Inherited {
    bind: (event: string, listener: ListenerFunction, priority: number) => void;
    unbind: (event: string, Listener: ListenerFunction) => void;
  }
  export interface EventsSpecs {
    supported?: [string];
    bind?: Inherited;
  }
  export type ListenerFunction = (...args: any) => void;
  export interface ListenerSpecs {
    listener: ListenerFunction;
    priority: number;
  }
  export interface TriggerSpecs {
    name: string;
    async?: boolean;
  }
  export type Trigger = string | TriggerSpecs;
}


export import Events = ns_0.Events;
export import ListenerFunction = ns_1.ListenerFunction;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };