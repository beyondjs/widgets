/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/kernel/core';
import * as __beyond_dep_ns_1 from '@beyond-js/widgets/render';
import * as __beyond_dep_ns_2 from '@beyond-js/kernel/routing';
import * as __beyond_dep_ns_3 from '@beyond-js/events/events';
// layouts\index.ts
declare namespace ns_0 {
  import LayoutInstance = ns_1.LayoutInstance;
  /**
   * The registry of all layouts instances registered in the session, except the main layout
   */
  export class _default extends Map<string, LayoutInstance> {
    register(layout: LayoutInstance): void;
  }
}


// layouts\layout.ts
declare namespace ns_1 {
  import Layouts = ns_0._default;
  import PageInstance = ns_4.PageInstance;
  import Events = __beyond_dep_ns_0.Events;
  import IWidgetSpecs = __beyond_dep_ns_1.IWidgetSpecs;
  type LayoutChild = LayoutInstance | PageInstance;
  export class LayoutInstance extends Events {
    #private;
    get is(): string;
    get element(): string;
    get id(): string;
    get active(): LayoutChild;
    get children(): Map<string, LayoutChild>;
    /**
     * Layout constructor
     *
     * @param {Layouts} layouts The layouts registry
     * @param {string} element The element name of the widget. Undefined if the project does not set a layout
     * and the index.html has a <beyond-layout-children/> as its main layout container
     * @param {Layout} parent The parent layout. Undefined if it is the main layout
     */
    constructor(layouts: Layouts, element?: string, parent?: LayoutInstance);
    /**
     * Activates the current page being navigated
     * Create the layout instance if not previously created
     *
     * @param {PageInstance} page The page being navigated
     */
    activate(page: PageInstance, layouts: IWidgetSpecs[]): void;
    deactivate(): void;
  }
  export {};
}


// manager.ts
declare namespace ns_2 {
  import URI = __beyond_dep_ns_2.URI;
  import LayoutInstance = ns_1.LayoutInstance;
  import Pages = ns_3._default;
  import Layouts = ns_0._default;
  class Manager {
    #private;
    get initialised(): boolean;
    get ready(): Promise<unknown>;
    constructor();
    get layouts(): Layouts;
    get pages(): Pages;
    get main(): LayoutInstance;
    set(uri: URI): Promise<void>;
  }
  export const manager: Manager;
  export {};
}


// pages\index.ts
declare namespace ns_3 {
  import BeyondWidget = __beyond_dep_ns_1.BeyondWidget;
  import URI = __beyond_dep_ns_2.URI;
  import Route = ns_5.Route;
  import PageInstance = ns_4.PageInstance;
  type pathname = string;
  export class _default extends Map<pathname, PageInstance> {
    instance(id: string): PageInstance;
    obtain({
      widget,
      id
    }: {
      widget?: BeyondWidget;
      id?: string;
    }): PageInstance;
    register(uri: URI, route: Route): PageInstance;
  }
  export {};
}


// pages\instance.ts
declare namespace ns_4 {
  import URI = __beyond_dep_ns_2.URI;
  import Route = ns_5.Route;
  import IWidgetSpecs = __beyond_dep_ns_1.IWidgetSpecs;
  import PageURI = ns_6.PageURI;
  export interface IParents {
    error?: string;
    value?: IWidgetSpecs[];
  }
  export class PageInstance {
    #private;
    get uri(): PageURI;
    get route(): Route;
    get element(): string;
    get is(): string;
    get id(): string;
    constructor(uri: URI, route: Route);
    /**
     * Returns the ascending layouts for the current page
     *
     * @return {{error?: string, parents?: IWidgetSpecs[]}}
     */
    get parents(): IParents;
  }
}


// pages\route.ts
declare namespace ns_5 {
  export class Route {
    #private;
    get pathname(): string;
    get page(): string;
    get vars(): Map<string, string>;
    constructor(pathname: string);
    process(): Promise<void>;
  }
}


// pages\uri.ts
declare namespace ns_6 {
  import URI = __beyond_dep_ns_2.URI;
  import Events = __beyond_dep_ns_3.Events;
  import Route = ns_5.Route;
  /**
   * The PageURI class is designed to extend the URI structure provided by the BeyondJS kernel routing,
   * incorporating variables extracted from the pathname as defined by a Route object.
   *
   * Additionally, it is expected for the URI to change in response to modifications in the query string.
   * This class facilitates the tracking of these changes, ensuring that the page can respond dynamically
   * to query string updates.
   */
  export class PageURI extends Events {
    #private;
    get route(): Route;
    get uri(): URI;
    get pathname(): string;
    get search(): string;
    get qs(): __beyond_dep_ns_2.ns_4.QueryString;
    get hash(): string;
    get vars(): Map<string, string>;
    constructor({
      uri,
      route
    }: {
      uri?: URI;
      route?: Route;
    });
    update(uri: URI): void;
  }
}


export import LayoutInstance = ns_1.LayoutInstance;
export import manager = ns_2.manager;
export import PageInstance = ns_4.PageInstance;
export import Route = ns_5.Route;
export import PageURI = ns_6.PageURI;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };