/************
Processor: ts
************/

// widgets.ts
declare namespace ns_0 {
  export interface IWidgetSpecs {
    name: string;
    vspecifier: string;
    attrs?: string[];
    is?: string;
    layout?: string;
    route?: string;
    render: {
      multilanguage?: boolean;
      ssr: boolean;
      csr: boolean;
      sr: boolean;
    };
  }
  export type StylesManager = any;
  export type BeyondWidget = HTMLElement;
  export const widgets: {
    register(specs: IWidgetSpecs[]): void;
    clear(): void;
    delete(key: string): boolean;
    forEach(callbackfn: (value: IWidgetSpecs, key: string, map: Map<string, IWidgetSpecs>) => void, thisArg?: any): void;
    get(key: string): IWidgetSpecs;
    has(key: string): boolean;
    set(key: string, value: IWidgetSpecs): any;
    readonly size: number;
    entries(): IterableIterator<[string, IWidgetSpecs]>;
    keys(): IterableIterator<string>;
    values(): IterableIterator<IWidgetSpecs>;
    [Symbol.iterator](): IterableIterator<[string, IWidgetSpecs]>;
    readonly [Symbol.toStringTag]: string;
  };
}


export import IWidgetSpecs = ns_0.IWidgetSpecs;
export import StylesManager = ns_0.StylesManager;
export import BeyondWidget = ns_0.BeyondWidget;
export import widgets = ns_0.widgets;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };