import {WidgetSpecs, widgets} from '@beyond-js/kernel/widgets';
import {beyond, Bundle, BundleStyles} from '@beyond-js/kernel/core';

export /*bundle*/
interface IWidgetStore {
    toJSON(): object;

    hydrate(cached: object): Promise<void>;

    fetch(): Promise<void>;
}

type ControllerSpecs = Partial<{ specs: WidgetSpecs, component: HTMLElement, language: string }>;

export /*bundle*/
abstract class BeyondWidgetControllerBase {
    #specs: WidgetSpecs;

    readonly #bundle: Bundle;
    get bundle() {
        return this.#bundle;
    }

    get element(): string {
        return this.#specs.name;
    }

    get is(): string {
        return this.#specs.is;
    }

    get route(): string {
        return this.#specs.route;
    }

    get layout(): string {
        return this.#specs.layout;
    }

    readonly #language: string;
    get language() {
        return this.#language;
    }

    // The widget component to be mounted should be specified by the module
    // (can be a React, Svelte, Vue, ... component)
    get Widget(): any {
        return;
    }

    get styles(): BundleStyles [] {
        const styles: Set<BundleStyles> = new Set();
        const recursive = (bundle: Bundle): void => bundle.dependencies.forEach(resource => {
            if (!beyond.bundles.has(resource)) return;

            const dependency = beyond.bundles.get(resource);
            styles.add(dependency.styles);
            recursive(dependency);
        });

        styles.add(this.bundle.styles);
        recursive(this.bundle);

        return [...styles];
    }

    createStore(language?: string): IWidgetStore {
        return void (language);
    }

    protected constructor({specs, component, language}: ControllerSpecs) {
        if (!specs) {
            const {localName} = component;
            if (!widgets.has(localName)) throw new Error(`Widget name "${localName}" is not registered`);
            specs = widgets.get(localName);
        }

        this.#specs = specs;
        this.#language = language;

        if (!beyond.bundles.has(specs.id)) {
            throw new Error(`Bundle "${specs.id}" not found on "${specs.name}" widget`);
        }
        this.#bundle = beyond.bundles.get(specs.id);
    }
}
